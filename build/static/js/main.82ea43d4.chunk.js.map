{"version":3,"sources":["SyncLineChart.js","ToolbarFlow.js","CustomNodes.js","BikeFlowUpdateHandler.js","BikeFlowChart.js","Top.js","App.js","reportWebVitals.js","index.js"],"names":["_linspace","end","number","Array","Math","ceil","keys","map","i","round","dataToChartFormat","data","obj","Object","length","_format","r","values","dpoint","sol_name","push","SyncLineChart","props","lr_key","leverage_ratio_key","travel_key","as_key","anti_squat_key","max_travel","style","width","className","ResponsiveContainer","height","LineChart","syncId","margin","top","right","left","bottom","CartesianGrid","strokeDasharray","XAxis","type","dataKey","domain","ticks","YAxis","allowDataOverflow","Tooltip","formatter","label","labelFormatter","contentStyle","itemStyle","Line","stroke","fill","dot","ToolbarFlow","addLink","addShock","setSelect0","setSelect1","clearAll","params","setParams","changeFlag","setChangeFlag","nodes","useStoreState","store","edges","onDragStart","event","nodeType","dataTransfer","setData","effectAllowed","_nodesDroplist","node","value","id","updateParameter","param_key","newParams","parseFloat","draggable","placeholderClassName","controlClassName","menuClassName","arrowClassName","options","onChange","option","placeholder","onClick","__rf","position","x","toFixed","y","edge","target","CustomNode","memo","isValidConnection","border","backgroundColor","isConnectable","BikeFlowUpdateHandler","shock","reactFlowWrapper","setBikeData","useEffect","nodesToBikeData","current","getBoundingClientRect","y_offset","points","assign","name","pos","links","a","source","b","wheelbase","chainring_teeth","cassette_teeth","wheel_size","cog_height","initialElements","BikeFlowChart","bikeData","clearBikeData","clearSolutionData","debug","useState","select0","select1","useRef","reactFlowInstance","setReactFlowInstance","elements","setElements","setShock","loadBikeData","reactFlowBounds","newNodes","p","es","concat","l","addEdge","nodeTypes","linkage","ground","rear_wheel","front_wheel","bottom_bracket","els","ref","onElementsRemove","elementsToRemove","removeElements","onLoad","_reactFlowInstance","onDrop","preventDefault","getData","project","clientX","clientY","point_id","newNode","connectable","onMouseUp","onDragOver","dropEffect","backgroundImage","backgroundRepeat","backgroundSize","Top","fetchBikeData","setDebug","class","App","solution","setSolution","results","console","log","solveBikeData","fetch","encodeURIComponent","then","res","json","JSON","stringify","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.82ea43d4.chunk.js","sourcesContent":["import React from 'react';\nimport {\n    LineChart,\n    Line,\n    XAxis,\n    YAxis,\n    CartesianGrid,\n    Tooltip,\n    ResponsiveContainer,\n  } from 'recharts';\n\nimport './App.css'\n \nconst _linspace = (end,number) => (\n  [...Array(Math.ceil(number)).keys()] //create array of n nonnegative integers\n  .map(i => Math.round(i*(end/(number-1)))) //scale up to desired end length\n)\n\nconst isEmpty = (obj) => (\n  Object.keys(obj).length === 0\n);\n\nconst dataToChartFormat = (data) => (\n  (isEmpty(data) ? [] : _format(data))\n);\n\nconst _format = (data) => {\n  let r = [];\n  for (let i = 0; i < Object.values(data)[0].length; i++){\n    let dpoint = {}\n    for (let sol_name in data){        \n      dpoint[sol_name] = data[sol_name][i]\n    }\n    r.push(dpoint)\n  }\n  return r;\n};\n\nexport default function SyncLineChart(props) {\n\n  const data = dataToChartFormat(props.data)\n  const lr_key = props.leverage_ratio_key\n  const travel_key = props.travel_key\n  const as_key = props.anti_squat_key \n\n  const max_travel = (data.length>0 ? data[data.length-1][travel_key] : 0)\n\n\n  return(\n    <div style={{ width: '100%' }}>\n    <div className = \"title\">Results:</div>\n    <div className = \"description\">Leverage Ratio</div>\n\n    <ResponsiveContainer width=\"100%\" height={450}>\n      <LineChart\n        width={500}\n        height={200}\n        data={data}\n        syncId=\"anyId\"\n        margin={{\n          top: 10,\n          right: 30,\n          left: 0,\n          bottom: 0,\n        }}\n      >\n        <CartesianGrid strokeDasharray=\"3 3\" />\n        <XAxis type = \"number\" dataKey={travel_key} domain = {['auto', 'auto']} ticks = {_linspace(max_travel,max_travel/20+1)}/>\n        <YAxis type = \"number\" domain={['auto', 'auto']} allowDataOverflow={true}/>\n        <Tooltip formatter = {(label) => Math.round(label*100)/100} labelFormatter={(label) => \"Travel: \" + Math.round(label*100)/100} contentStyle = {{'color':'#E4C3AD','background-color': '#546A7B'}} itemStyle = {{'color':'#E4C3AD'}} />\n        <Line dataKey={lr_key} stroke=\"#8884d8\" fill=\"#8884d8\" dot = {false} />\n      </LineChart>\n    </ResponsiveContainer>\n    \n    <div className = \"description\">Anti-Squat</div>\n\n    <ResponsiveContainer width=\"100%\" height={450}>\n      <LineChart\n        width={500}\n        height={200}\n        data={data}\n        syncId=\"anyId\"\n        margin={{\n          top: 10,\n          right: 30,\n          left: 0,\n          bottom: 0,\n        }}\n      >\n        <CartesianGrid strokeDasharray=\"3 3\" />\n        <XAxis type = \"number\" dataKey={travel_key} domain = {['auto', 'auto']} ticks = {_linspace(max_travel,max_travel/20+1)}/>\n        <YAxis type= \"number\" domain = {['auto', 'auto']}/>\n        <Tooltip  formatter = {(label) => Math.round(label*100)/100}labelFormatter={(label) => \"Travel: \" + Math.round(label*100)/100} contentStyle = {{'color':'#E4C3AD','background-color': '#546A7B'}} itemStyle = {{'color':'#E4C3AD'}} />\n        <Line  dataKey={as_key} stroke=\"#82ca9d\" fill=\"#82ca9d\" dot = {false} />\n      </LineChart>\n    </ResponsiveContainer>\n  </div>\n  )\n\n}","import React from 'react';\n\nimport Dropdown from 'react-dropdown';\nimport 'react-dropdown/style.css';\nimport './App.css'\n\nimport { useStoreState} from 'react-flow-renderer';\n\nexport default function ToolbarFlow ({addLink,\n                                      addShock,\n                                      setSelect0,\n                                      setSelect1,\n                                      clearAll,\n                                      params,\n                                      setParams,\n                                      changeFlag,\n                                      setChangeFlag}) {\n\n  const nodes = useStoreState((store) => store.nodes);\n  const edges = useStoreState((store) => store.edges);                            \n\n  const onDragStart = (event, nodeType) => {\n    event.dataTransfer.setData('application/nodeType', nodeType);\n    event.dataTransfer.effectAllowed = 'move';\n  };\n\n  const _onSelect0 = (option) => setSelect0(option.value);\n  const _onSelect1 = (option) => setSelect1(option.value);\n  \n  const _nodesDroplist = () => {\n    const list = (nodes.length ? nodes.map( (node) => ({value: node.id, label: node.data.label})) : [])\n    return list\n  }\n\n  const updateParameter = (value,param_key) => {\n    const newParams = params\n    newParams[param_key] = parseFloat(value)\n    setParams(newParams)\n    setChangeFlag(!changeFlag)\n  }\n\n  return (\n    <aside>\n      <div className=\"title\">Add Points:</div>\n      <div className = \"description\">Drag to add</div>\n      <div className=\"dndnode\" onDragStart={(event) => onDragStart(event, 'linkage')} draggable>\n        Linkage Point\n      </div>\n      <div className=\"dndnode\" onDragStart={(event) => onDragStart(event, 'ground')} draggable>\n        Ground Point\n      </div>\n      <div className=\"dndnode\" onDragStart={(event) => onDragStart(event, 'rear_wheel')} draggable>\n        Rear Wheel\n      </div>\n      <div className=\"dndnode\" onDragStart={(event) => onDragStart(event, 'front_wheel')} draggable>\n        Front Wheel\n      </div>\n      <div className=\"dndnode\" onDragStart={(event) => onDragStart(event, 'bottom_bracket')} draggable>\n        Bottom bracket \n      </div>\n      <div className=\"title\">Add links:</div>\n      <Dropdown \n        className = \"dropdown\"\n        placeholderClassName = \"dropdown\"\n        controlClassName = \"dropdown\"\n        menuClassName = \"dropdown-menu\"\n        arrowClassName = \"arrow\"\n        options = {_nodesDroplist()}\n        onChange={_onSelect0} \n        value={\"Select link\"} \n        placeholder=\"Select link\"\n      />\n      <Dropdown \n        className = \"dropdown\"\n        placeholderClassName = \"dropdown\"\n        controlClassName = \"dropdown\"\n        menuClassName = \"dropdown-menu\"\n        arrowClassName = \"arrow\"\n        options = {_nodesDroplist()}\n        onChange={_onSelect1}  \n        value={\"Select link\"} \n        placeholder=\"Select link\"\n      />   \n      <button className = \"button\" onClick={addLink}>  \n        Add Link!\n      </button>   \n      <button className = \"button\" onClick={addShock}>  \n        Add Shock!\n      </button>  \n      <div className=\"title\">Clear Data:</div>\n      <button className = \"button\" onClick={clearAll}>  \n        Clear\n      </button>  \n      <div>\n      {/* all the random shit goes here*/}\n        {nodes.map((node) => (\n          <div key = {node.id}>\n            {node.id} {\"\\n\"}\n            x: {node.__rf.position.x.toFixed(2)}, y: {node.__rf.position.y.toFixed(2)} \n          </div>\n        ))}     \n      </div>\n      <div>\n        {edges.map((edge) => (\n          <div key = {edge.id}>\n            {edge.id}\n          </div>\n        ))}   \n      </div>\n      <div>\n      <input\n        onChange = {(event) => updateParameter(event.target.value,'wheel_size')} \n        placeholder =\"Wheel Size (in)\"/> \n      </div>\n      <div>\n      <input\n        onChange = {(event) => updateParameter(event.target.value,'chainring_teeth')} \n        placeholder =\"Chainring Teeth\"/> \n      </div>\n      <div>\n      <input\n        onChange = {(event) => updateParameter(event.target.value,'cassette_teeth')} \n        placeholder =\"Cassette Teeth\"/> \n      </div>\n    </aside>\n  );\n};","import React, {memo} from 'react';\n\nimport { Handle } from 'react-flow-renderer';\n\n\nconst CustomNode = memo(({data}) => (\n        <>\n                {data.label}\n                <Handle isValidConnection = {true}\n                        position=\"bottom\" \n                        style = {{border: 'rgba(0,0,0,0)',width:'3px',height:'3px',backgroundColor:'rgb(255,0,0)'}}\n                        isConnectable = {true}\n                        />\n        </>\n));\n\nexport {CustomNode}","import {useEffect} from 'react';\n\nimport {useStoreState} from 'react-flow-renderer';\n\nexport default function BikeFlowUpdateHandler ({shock,\n                                                reactFlowWrapper,\n                                                setBikeData,\n                                                changeFlag,\n                                                params}) {\n\n    const nodes = useStoreState(store => store.nodes)\n    const edges = useStoreState(store => store.edges)\n\n    //update the bikeData state in the app whenever the bike flowchart changes\n    useEffect( () => {\n        setBikeData(nodesToBikeData(\n            nodes,\n            edges,\n            shock,\n            reactFlowWrapper.current.getBoundingClientRect().height)\n            )\n        }\n    ,[changeFlag])\n\n    //turns the nodes fromat into the bikedata format\n    const nodesToBikeData = (nodes,edges,shock,y_offset) => { \n        const points =  \n        Object.assign({},\n            ...nodes.map((node) => (\n            {[node.id]: {name: node.id,\n                            type: node.type,\n                            pos: [node.__rf.position.x, y_offset - node.__rf.position.y]}}\n            ))\n        );\n        const links = \n        Object.assign({},\n            ...edges.map((edge) => (\n            {[edge.id]:{name: edge.id,\n                        a: edge.source,\n                        b: edge.target}}\n            ))\n        );\n        \n        const pars = {\n            wheelbase: params.wheelbase,\n            chainring_teeth: params.chainring_teeth,\n            cassette_teeth: params.cassette_teeth,\n            wheel_size: params.wheel_size,\n            cog_height: params.cog_height\n            }; //unhardcode these i beg you at some point\n\n        const data = {points:points,links:links,shock:shock,params:pars};\n        return(data);\n    }\n\n  return(null);\n}","import React, { useEffect,useState, useRef } from 'react';\nimport ReactFlow, {\n  ReactFlowProvider,\n  removeElements,\n  Controls,\n  Background,\n  addEdge,\n  } from 'react-flow-renderer';\n\nimport ToolbarFlow from './ToolbarFlow'\nimport { CustomNode } from './CustomNodes';\nimport BikeFlowUpdateHandler from './BikeFlowUpdateHandler';\n\nimport './dnd.css';\n\n  \n  //id system to be used by nodes in 'flowchart' used to represent bike geo\n  let id = 0;\n  const getId = () => `Point_${id++}`;  \n\n  //start with no geo\n  const initialElements = [];\n\n  const img_link = 'https://ep1.pinkbike.org/p5pb20979226/p5pb20979226.jpg'; //UNHARDCODE later\n\n  export default function BikeFlowChart({bikeData,\n                                         setBikeData,\n                                         clearBikeData,\n                                         clearSolutionData,\n                                         debug}) {\n\n\n    const[select0,setSelect0] = useState(null);\n    const[select1,setSelect1] = useState(null);\n\n    const reactFlowWrapper = useRef(null);\n\n    const [reactFlowInstance, setReactFlowInstance] = useState(null);\n    const [elements, setElements] = useState(initialElements);\n    const [shock,setShock] = useState(\"\");\n    const [changeFlag,setChangeFlag] = useState(true)\n    const [params,setParams] = useState({\n      wheelbase: 1255,\n      chainring_teeth: 30,\n      cassette_teeth: 52,\n      wheel_size: 29,\n      cog_height: 1100\n    })\n\n    useEffect(()=>{\n      loadBikeData(bikeData)\n    },[bikeData]);\n\n    //flowchart element adding and removing fcns\n    const addLink = () => {\n      if (select0===select1) {} //do nothing if equal\n      else{\n        const params =  {id: `${select0}-${select1}`,source: select0,target: select1,type: 'straight'}\n        setElements((els) => addEdge(params, els))}\n    }\n\n    const addShock = () => {\n      if (select0===select1) {} //do nothing if equal\n      else {\n        const params =  {id: `${select0}-${select1}`,source: select0,target: select1,type: 'straight',style: { stroke: 'red' }}\n        setElements((els) => addEdge(params, els))\n        setShock(params[\"id\"])}\n    }\n\n    const clearAll = () => {\n      clearBikeData()\n      clearSolutionData()\n      setElements([])\n      let id = 0;\n    }\n    \n    const onElementsRemove = (elementsToRemove) =>\n      setElements((els) => removeElements(elementsToRemove, els));\n  \n    const onLoad = (_reactFlowInstance) =>\n      setReactFlowInstance(_reactFlowInstance);\n  \n    const onDragOver = (event) => {\n      event.preventDefault();\n      event.dataTransfer.dropEffect = 'move';\n    };\n\n    const onChange = () => {\n      setChangeFlag(!changeFlag)\n    }\n\n    //create chart element when dropped over from sidebar\n    const onDrop = (event) => {\n      event.preventDefault();\n      \n      if (reactFlowInstance){\n\n        const reactFlowBounds = reactFlowWrapper.current.getBoundingClientRect();\n        const type = event.dataTransfer.getData('application/nodeType');\n        const width = 100\n\n        const position = reactFlowInstance.project({\n          x: event.clientX - reactFlowBounds.x - width/2,\n          y: event.clientY - reactFlowBounds.y,\n        });\n        const point_id = getId();\n        const newNode = {\n          id: point_id, type, position, connectable:true,\n          style: {\n            width: width\n          },\n          data: {\n            label: (  <> {point_id} {\"\\n\"} {type} </>)\n          },\n        };\n        setElements((es) => es.concat(newNode));\n      }\n    };\n    \n    const loadBikeData = (data) => {\n      setElements([])\n      if (data === null) {return};\n      const reactFlowBounds = reactFlowWrapper.current.getBoundingClientRect()\n      const newNodes = [];\n      const points = data[\"points\"];\n      const links = data[\"links\"];\n      for (let p in points){\n        newNodes.push({id: points[p][\"name\"], \n                      type: points[p][\"type\"],\n                      position: {x:points[p][\"pos\"][0],y:reactFlowBounds.height - points[p][\"pos\"][1]},\n                      style: {\n                        width: 100\n                      },\n                      data: {\n                        label: (  <> {points[p][\"name\"]} {\"\\n\"} {points[p][\"type\"]} </>)\n                      },\n        })\n      }\n      setElements((es) => es.concat(newNodes));\n\n      for (let l in links) {\n        const params = {id: links[l][\"name\"],source: links[l][\"a\"],target: links[l][\"b\"],type: 'straight'}\n        setElements((es) => addEdge(params,es))\n      }\n      setShock(data[\"shock\"])\n    };\n\n    const nodeTypes = {\n      linkage: CustomNode,\n      ground: CustomNode,\n      rear_wheel: CustomNode,\n      front_wheel: CustomNode,\n      bottom_bracket: CustomNode\n    }\n\n    return(\n      <div className=\"dndflow\">\n        <ReactFlowProvider>\n          {debug ?\n          <ToolbarFlow \n            addLink = {addLink}\n            addShock = {addShock} \n            clearAll = {clearAll} \n            setSelect0 = {setSelect0} \n            setSelect1 = {setSelect1}\n            params = {params}\n            setParams = {setParams}\n            changeFlag = {changeFlag}\n            setChangeFlag = {setChangeFlag}/> : null\n          }\n          <div className=\"reactflow-wrapper\" ref = {reactFlowWrapper}>\n            <ReactFlow\n              elements={elements}\n              //onConnect={onConnect}\n              onElementsRemove={onElementsRemove}\n              onLoad={onLoad}\n              onDrop={onDrop}\n              onMouseUp = {onChange}\n              onDragOver={onDragOver}\n              nodeTypes={nodeTypes}\n            >\n            <Controls />\n            <Background \n              style={ { backgroundImage: \"\",//`url(${img_link})`,\n              backgroundRepeat: 'no-repeat',\n              backgroundSize: `100% auto`}}/>\n            </ReactFlow>\n          </div>\n        <BikeFlowUpdateHandler\n          bikeData={bikeData}\n          setBikeData = {setBikeData}\n          changeFlag = {changeFlag}\n          shock = {shock}\n          reactFlowWrapper = {reactFlowWrapper}\n          params = {params}\n        />\n        </ReactFlowProvider>\n    </div>\n    );\n  }","import React from 'react';\n\nimport './App.css'\n\nexport default function Top({fetchBikeData,clearBikeData,clearSolutionData,setDebug,debug}) { \n\n    return(\n        <div class = \"top\">\n        <button className = \"top-button\" onClick = {() => {fetchBikeData(1)}}>\n            Load Example\n        </button> \n        <button className = \"top-button\" onClick = {() => {clearBikeData()}}>\n            Clear\n        </button> \n        {/*\n        <button className = \"top-button\" onClick = {() => {fetchBikeData(2)}}>\n            Load Example 2\n        </button>\n        <button className = \"top-button\" onClick = {() => {fetchBikeData(3)}}>\n            Load Example 3\n        </button>\n        <button className = \"top-button\" onClick = {() => {fetchBikeData(4)}}>\n            Load Example 4\n        </button>\n\n\n        <button  className = \"top-button\"//onClick = {}\n        >\n            Choose Image\n        </button> \n        */}\n        <button  className = \"top-button\" onClick = {() => setDebug(!debug)}\n        >\n        DEBUG {debug? <>on</>: <>off</>}\n        </button> \n        <description className = \"description\">\n        &nbsp; Drag points to recalculate results (may take a few seconds)\n        </description>\n        </div>\n        \n    )\n}\n\n","import React, { useState , useEffect } from 'react';\nimport './App.css';\nimport SyncLineChart from './SyncLineChart';\nimport BikeFlowChart from './BikeFlowChart';\nimport Top from './Top';\n\n\nfunction App() {\n\n  const [bikeData,setBikeData] = useState(null);\n  const [solution,setSolution] = useState({});\n  const [debug,setDebug] = useState(false);\n\n  const clearBikeData = () => {setBikeData(null)} \n  const clearSolutionData = () => {setSolution({})}\n\n  const travel = 170; //unhardcode as well pls\n  const results = [\"LeverageRatio\", 'AntiSquatPercent',\"VerticalTravel\"];\n\n  useEffect( () => {\n    fetchBikeData(1);\n  },[]);\n\n  useEffect(() => {\n    console.log(bikeData)\n    solveBikeData();\n  },[bikeData]);\n\n  const fetchBikeData =  (id) => {\n    fetch(`/api/getbikedata?id=${encodeURIComponent(id)}`)\n    .then(res => res.json())\n    .then(data => {setBikeData(data);\n    });\n  }\n\n  //solves bike_data whenever it changes\n  const solveBikeData = () => {\n    fetch(`/api/solve?bike_data=${encodeURIComponent(JSON.stringify(bikeData))}&sim_travel=${encodeURIComponent(travel)}&desired_outputs=${encodeURIComponent(JSON.stringify(results))}`)\n    .then(res => res.json())\n    .then(data => setSolution(data));\n  };\n\n  //Rendering\n  return (\n    <div className=\"App\">\n      <div class = \"grid-container\">\n        <Top\n          fetchBikeData = {fetchBikeData}\n          clearBikeData= {clearBikeData}\n          setDebug = {setDebug}\n          debug={debug}\n        />\n        <div class = \"left\">\n          <BikeFlowChart\n            bikeData = {bikeData}\n            setBikeData = {setBikeData}\n            clearBikeData = {clearBikeData}\n            clearSolutionData = {clearSolutionData}\n            debug={debug}\n          />\n        </div>\n        <div class = \"right\">\n          <SyncLineChart \n            data={(solution)}\n            leverage_ratio_key = {results[0]} \n            anti_squat_key = {results[1]} \n            travel_key = {results[2]} \n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}